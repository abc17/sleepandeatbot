import json
import re
import io
import os
import logging
from datetime import datetime, timedelta, time
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")

class BabyDataAnalyzer:
    def __init__(self):
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        self.sleep_pattern = re.compile(r'(\d{1,2}:\d{2})[‚Äì\-](\d{1,2}:\d{2}).*—Å–æ–Ω', re.IGNORECASE)
        self.feed_pattern = re.compile(r'(\d{1,2}:\d{2}) —Å–º–µ—Å—å[^\d]*(\d+)')
        
    def get_color_by_amount(self, amount, cmap):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–º–µ—Å–∏"""
        if amount <= 40:
            return cmap(0.3)
        elif amount <= 70:
            return cmap(0.5)
        elif amount <= 100:
            return cmap(0.7)
        else:
            return cmap(0.9)
    
    def parse_chat_data(self, data):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ —á–∞—Ç–∞"""
        messages = data['messages']
        sleep_data = []
        feed_data = []

        for msg in messages:
            if msg.get('type') != 'message':
                continue

            text = msg.get('text')
            if isinstance(text, list):
                text = ''.join([t if isinstance(t, str) else t.get('text', '') for t in text])

            msg_date = datetime.fromisoformat(msg['date'])

            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ —Å–Ω–µ
            sleep_match = self.sleep_pattern.search(text)
            if sleep_match:
                start_str, end_str = sleep_match.groups()
                start_time = datetime.strptime(start_str, "%H:%M").time()
                end_time = datetime.strptime(end_str, "%H:%M").time()

                start_dt = datetime.combine(msg_date.date(), start_time)
                end_dt = datetime.combine(msg_date.date(), end_time)

                if end_time <= start_time:
                    end_dt += timedelta(days=1)
                    if msg_date.time() < time(4, 0):
                        start_dt -= timedelta(days=1)
                        end_dt -= timedelta(days=1)

                sleep_data.append({'date': start_dt.date(), 'start': start_dt, 'end': end_dt})
                continue

            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏
            feed_match = self.feed_pattern.search(text)
            if feed_match:
                feed_time = datetime.strptime(feed_match.group(1), "%H:%M").time()
                amount = int(feed_match.group(2))
                feed_dt = datetime.combine(msg_date.date(), feed_time)
                feed_data.append({'date': msg_date.date(), 'time': feed_dt, 'amount': amount})

        return pd.DataFrame(sleep_data), pd.DataFrame(feed_data)
    
    def create_timeline_chart(self, sleep_df, feed_df):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        if sleep_df.empty and feed_df.empty:
            return None
            
        all_dates = sorted(set(feed_df['date'] if not feed_df.empty else set()).union(
                          set(sleep_df['date'] if not sleep_df.empty else set())))
        
        if not all_dates:
            return None
            
        fig, ax = plt.subplots(figsize=(12, len(all_dates) * 0.6))
        
        # –¶–≤–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –æ–±—ä–µ–º–æ–≤ —Å–º–µ—Å–∏
        cmap = plt.cm.Blues
        if not feed_df.empty:
            norm = plt.Normalize(feed_df['amount'].min(), feed_df['amount'].max())

        for i, day in enumerate(all_dates):
            base_time = datetime.combine(day, datetime.min.time())

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω–∞
            if not sleep_df.empty:
                day_sleep = sleep_df[sleep_df['date'] == day]
                for _, row in day_sleep.iterrows():
                    start = row['start']
                    end = row['end']
                    ax.hlines(i, (start - base_time).total_seconds() / 3600,
                              (end - base_time).total_seconds() / 3600,
                              colors='skyblue', linewidth=10, 
                              label='–°–æ–Ω' if i == 0 else "")

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è
            if not feed_df.empty:
                day_feed = feed_df[feed_df['date'] == day]
                for _, row in day_feed.iterrows():
                    time_point = row['time']
                    amount = row['amount']
                    time_offset = (time_point - base_time).total_seconds() / 3600
                    color = self.get_color_by_amount(amount, cmap)
                    ax.plot(time_offset, i, 'o', color=color, markersize=8,
                           label='–°–º–µ—Å—å' if i == 0 and _ == day_feed.index[0] else "")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        ax.set_yticks(range(len(all_dates)))
        ax.set_yticklabels([day.strftime('%Y-%m-%d') for day in all_dates])
        ax.set_xlabel('–í—Ä–µ–º—è —Å—É—Ç–æ–∫ (—á–∞—Å—ã)')
        ax.set_xlim(0, 24)
        ax.invert_yaxis()
        ax.grid(True, axis='x', linestyle='--', alpha=0.5)
        ax.set_xticks(range(0, 24))
        ax.set_xticklabels([f'{h}' for h in range(0, 24)])
        
        if not sleep_df.empty or not feed_df.empty:
            ax.legend()
        
        plt.title('–†–µ–∂–∏–º —Å–Ω–∞ –∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ –¥–Ω—è–º')
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
        buf.seek(0)
        plt.close()
        return buf
    
    def create_summary_chart(self, sleep_df, feed_df):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –¥–Ω—è–º"""
        if sleep_df.empty and feed_df.empty:
            return None
            
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        daily_data = {}
        
        if not feed_df.empty:
            daily_feed = feed_df.groupby('date')['amount'].sum().reset_index()
            for _, row in daily_feed.iterrows():
                daily_data[row['date']] = {'amount': row['amount']}
        
        if not sleep_df.empty:
            sleep_df['duration_min'] = (sleep_df['end'] - sleep_df['start']).dt.total_seconds() / 60
            daily_sleep = sleep_df.groupby('date')['duration_min'].sum().reset_index()
            for _, row in daily_sleep.iterrows():
                if row['date'] not in daily_data:
                    daily_data[row['date']] = {}
                daily_data[row['date']]['duration_hr'] = row['duration_min'] / 60
        
        if not daily_data:
            return None
            
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
        merged_data = []
        for date, values in daily_data.items():
            row = {'date': date}
            row.update(values)
            merged_data.append(row)
        
        merged = pd.DataFrame(merged_data).sort_values('date')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, ax1 = plt.subplots(figsize=(10, 5))
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å–º–µ—Å–∏ (–ª–µ–≤–∞—è –æ—Å—å)
        if 'amount' in merged.columns:
            color1 = 'tab:orange'
            ax1.set_xlabel('–î–∞—Ç–∞')
            ax1.set_ylabel('–°–º–µ—Å—å (–º–ª)', color=color1)
            ax1.bar(merged['date'], merged.get('amount', 0), 
                   color=color1, alpha=0.6, label='–°–º–µ—Å—å (–º–ª)')
            ax1.tick_params(axis='y', labelcolor=color1)
            max_amount = merged.get('amount', pd.Series([0])).max()
            ax1.set_ylim(0, max(max_amount, 120))
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å–Ω–∞ (–ø—Ä–∞–≤–∞—è –æ—Å—å)
        if 'duration_hr' in merged.columns:
            ax2 = ax1.twinx()
            color2 = 'tab:blue'
            ax2.set_ylabel('–°–æ–Ω (—á–∞—Å—ã)', color=color2)
            ax2.plot(merged['date'], merged['duration_hr'], 
                    color=color2, marker='o', label='–°–æ–Ω (—á–∞—Å—ã)')
            ax2.tick_params(axis='y', labelcolor=color2)
            max_sleep = merged['duration_hr'].max()
            ax2.set_ylim(0, max(max_sleep, 15))
        
        ax1.grid(axis='y', linestyle='--', alpha=0.5)
        fig.autofmt_xdate()
        plt.title('–°—É–º–º–∞—Ä–Ω–∞—è —Å–º–µ—Å—å –∏ —Å–æ–Ω –ø–æ –¥–Ω—è–º')
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
        buf.seek(0)
        plt.close()
        return buf

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
analyzer = BabyDataAnalyzer()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üë∂ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞ –∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è –º–∞–ª—ã—à–∞.

üìã –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å JSON —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–∞—Ç–æ–≤ Telegram
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –∑–∞–ø–∏—Å–∏ –æ —Å–Ω–µ (—Ñ–æ—Ä–º–∞—Ç "09:30‚Äì11:00 —Å–æ–Ω")  
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –∑–∞–ø–∏—Å–∏ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ (—Ñ–æ—Ä–º–∞—Ç "14:20 —Å–º–µ—Å—å 80")
‚Ä¢ –°—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–µ–∂–∏–º–∞ –¥–Ω—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üìé –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ JSON —Ñ–∞–π–ª —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º —á–∞—Ç–∞, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å –Ω–∞–≥–ª—è–¥–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏!

‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    """
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:

1Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —á–∞—Ç Telegram –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–æ—Ç—É
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –¥–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∞:
   ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –¥–Ω—è–º
   ‚Ä¢ –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–ø–∏—Å–µ–π:
‚Ä¢ –°–æ–Ω: "09:30‚Äì11:00 —Å–æ–Ω" –∏–ª–∏ "09:30-11:00 —Å–æ–Ω"
‚Ä¢ –°–º–µ—Å—å: "14:20 —Å–º–µ—Å—å 80" (–≤—Ä–µ–º—è –∏ –æ–±—ä–µ–º –≤ –º–ª)

‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:
‚Ä¢ –§–æ—Ä–º–∞—Ç: JSON
‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 20 –ú–ë
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ Telegram
    """
    await update.message.reply_text(help_text)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    document = update.message.document
    
    if not document.file_name.endswith('.json'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª.")
        return
    
    if document.file_size > 20 * 1024 * 1024:  # 20 –ú–ë
        await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë.")
        return
    
    await update.message.reply_text("üìÅ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file = await context.bot.get_file(document.file_id)
        file_bytes = await file.download_as_bytearray()
        
        # –ü–∞—Ä—Å–∏–Ω–≥ JSON
        data = json.loads(file_bytes.decode('utf-8'))
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        sleep_df, feed_df = analyzer.parse_chat_data(data)
        
        if sleep_df.empty and feed_df.empty:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ –∏–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª–µ.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–µ–π:\n"
                "‚Ä¢ –°–æ–Ω: '09:30‚Äì11:00 —Å–æ–Ω'\n"
                "‚Ä¢ –°–º–µ—Å—å: '14:20 —Å–º–µ—Å—å 80'"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:\n"
        if not sleep_df.empty:
            stats_text += f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –æ —Å–Ω–µ: {len(sleep_df)}\n"
        if not feed_df.empty:
            stats_text += f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏: {len(feed_df)}\n"
        
        await update.message.reply_text(stats_text + "\nüé® –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫–∏...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        timeline_chart = analyzer.create_timeline_chart(sleep_df, feed_df)
        if timeline_chart:
            await update.message.reply_photo(
                photo=timeline_chart,
                caption="üìà –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–µ–∂–∏–º–∞ –¥–Ω—è"
            )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        summary_chart = analyzer.create_summary_chart(sleep_df, feed_df)
        if summary_chart:
            await update.message.reply_photo(
                photo=summary_chart,
                caption="üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º"
            )
        
        await update.message.reply_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except json.JSONDecodeError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON.")
    except KeyError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á {e} –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ñ–∞–π–ª–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ JSON —Ñ–∞–π–ª —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º —á–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
